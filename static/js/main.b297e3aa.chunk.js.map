{"version":3,"sources":["components/LinkButton.tsx","components/Setup.tsx","hooks/useNotification.ts","hooks/useTimer.ts","hooks/useInterval.ts","utils.ts","components/Clock.tsx","components/PermissionDialog.tsx","components/Timer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["LinkButton","props","Button","as","colorProp","hasIcon","hasLabel","focus","colorValue","fillContainer","focusIndicator","pad","sizeProp","rest","Setup","useState","duration","setDuration","showAdvanced","setShowAdvanced","Layer","animation","full","Box","alignSelf","justify","align","fill","width","max","Heading","textAlign","TextInput","type","onChange","event","target","value","primary","label","to","margin","onClick","min","RangeInput","step","Number","toFixed","useTimer","onTick","onDone","useQueryParam","NumberParam","remaining","setRemaining","running","setRunning","useEffect","callback","delay","savedCallback","useRef","current","id","workerTimers","useInterval","useCallback","toggle","formatTime","time","prefix","hours","Math","floor","minutes","seconds","String","padStart","blink","keyframes","StyledClock","styled","GrommetClock","paused","css","Clock","Stack","anchor","Meter","round","values","aria-label","run","size","PermissionDialog","memo","permission","requestPermission","show","setShow","ToggleButton","SetupButton","Timer","Notification","setPermission","then","result","showNotification","title","options","navigator","serviceWorker","ready","registration","useNotification","tag","body","silent","renotify","theme","deepMerge","dark","layer","background","App","ReactRouterRoute","Route","Grommet","Main","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b297e3aa.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, ButtonProps } from \"grommet\";\nimport { Link, LinkProps } from \"react-router-dom\";\n\nexport const LinkButton: React.FC<Pick<LinkProps, \"to\"> &\n  ButtonProps> = props => {\n  return (\n    <Button\n      as={({\n        colorProp,\n        hasIcon,\n        hasLabel,\n        focus,\n        colorValue,\n        fillContainer,\n        focusIndicator,\n        pad,\n        sizeProp,\n        ...rest\n      }) => <Link {...rest} />}\n      {...props}\n    />\n  );\n};\n","import { Box, Button, Heading, Layer, RangeInput, TextInput } from \"grommet\";\nimport React, { useState } from \"react\";\nimport { LinkButton } from \"./LinkButton\";\n\nexport function Setup() {\n  const [duration, setDuration] = useState(1800);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  return (\n    <>\n      {showAdvanced && (\n        <Layer animation=\"fadeIn\" full>\n          <Box\n            alignSelf=\"center\"\n            pad=\"medium\"\n            justify=\"center\"\n            align=\"center\"\n            fill\n            width={{ max: \"large\" }}\n          >\n            <Heading textAlign=\"center\">Advanced setup</Heading>\n            <Box width=\"xsmall\">\n              <TextInput\n                type=\"number\"\n                onChange={(event: any) => setDuration(event.target.value)}\n                value={duration}\n              />\n            </Box>\n            <LinkButton\n              primary\n              label={`Start ${duration} seconds timer`}\n              to={`/timer?remaining=${duration}`}\n              margin=\"small\"\n            />\n            <Button onClick={() => setShowAdvanced(false)} label=\"Close\" />\n          </Box>\n        </Layer>\n      )}\n      <Heading>Timer setup</Heading>\n      <Box pad=\"medium\" width={{ min: \"medium\" }}>\n        <RangeInput\n          max={86400}\n          min={1800}\n          step={1800}\n          value={duration}\n          onChange={(event: any) => setDuration(Number(event.target.value))}\n        />\n      </Box>\n      <LinkButton\n        primary\n        to={`/timer?remaining=${duration}`}\n        label={`Start ${Number(duration / 3600).toFixed(1)} hours timer`}\n      />\n      <Button\n        onClick={() => setShowAdvanced(true)}\n        label=\"Advanced...\"\n        margin=\"small\"\n      />\n    </>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nexport const useNotification = () => {\n  const [permission, setPermission] = useState<NotificationPermission>(\n    Notification.permission\n  );\n\n  const requestPermission = useCallback(() => {\n    Notification.requestPermission().then(function (result) {\n      setPermission(result);\n    });\n  }, [setPermission]);\n\n  const showNotification = useCallback(\n    (title: string, options: NotificationOptions) => {\n      if (permission === \"granted\") {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.showNotification(title, options);\n        });\n      }\n    },\n    [permission]\n  );\n\n  return { showNotification, requestPermission, permission };\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { NumberParam, useQueryParam } from \"use-query-params\";\nimport { useInterval } from \"./useInterval\";\n\nexport const useTimer = (\n  onTick: (remaining: number) => void,\n  onDone: () => void\n) => {\n  const [remaining, setRemaining] = useQueryParam(\"remaining\", NumberParam);\n  const [duration, setDuration] = useQueryParam(\"duration\", NumberParam);\n  const [running, setRunning] = useState(remaining !== 0);\n\n  useEffect(() => {\n    if (!duration) {\n      setDuration(remaining);\n    }\n  }, [duration, remaining, setDuration]);\n\n  const tick = useCallback(() => {\n    if (duration) {\n      if (remaining && remaining > 0) {\n        onTick(remaining);\n        setRemaining(remaining - 1);\n      } else if (remaining === 0) {\n        onDone();\n        setRunning(false);\n        setRemaining(duration);\n      }\n    }\n  }, [duration, onDone, onTick, remaining, setRemaining]);\n\n  useInterval(tick, running ? 1000 : null);\n\n  const toggle = useCallback(() => setRunning((running) => !running), [\n    setRunning,\n  ]);\n\n  return {\n    running,\n    toggle,\n    duration: duration ?? 0,\n    remaining: remaining ?? 0,\n  };\n};\n","import { useEffect, useRef } from \"react\";\nimport * as workerTimers from \"worker-timers\";\n\nexport const useInterval = (\n  callback: (...args: any[]) => void,\n  delay: number | null\n) => {\n  const savedCallback = useRef<typeof callback>(function () {});\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handler = (...args: any[]) => savedCallback.current(...args);\n\n    if (delay !== null) {\n      const id = workerTimers.setInterval(handler, delay);\n      return () => workerTimers.clearInterval(id);\n    }\n  }, [delay]);\n};\n","export function formatTime(time: number, prefix = \"T\") {\n  const hours = Math.floor(time / 3600);\n  const minutes = Math.floor((time / 60) % 60);\n  const seconds = Math.floor(time % 60);\n\n  return `${prefix}${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(\n    2,\n    \"0\"\n  )}:${String(seconds).padStart(2, \"0\")}`;\n}\n","import { Clock as GrommetClock, Meter, Stack } from \"grommet\";\nimport React from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport { formatTime } from \"../utils\";\n\nexport interface ClockProps {\n  running: boolean;\n  duration: number;\n  remaining: number;\n}\n\nconst blink = keyframes`\n  50% {\n    opacity: 0;\n  }\n`;\n\nconst StyledClock = styled(GrommetClock)<{ paused: boolean }>`\n  animation: ${({ paused }) => paused && css`1s ${blink} ease-in-out infinite`};\n`;\n\nexport const Clock: React.FC<ClockProps> = ({\n  running,\n  duration,\n  remaining,\n}) => {\n  return (\n    <Stack anchor=\"center\" margin=\"medium\">\n      <Meter\n        max={duration ?? 0}\n        type=\"circle\"\n        round\n        values={[{ value: remaining ?? 0 }]}\n        aria-label=\"meter\"\n      />\n      <StyledClock\n        paused={!running}\n        type=\"digital\"\n        time={formatTime(remaining!)}\n        run=\"backward\"\n        size=\"xxlarge\"\n      />\n    </Stack>\n  );\n};\n","import { Box, Button, Heading, Layer } from \"grommet\";\nimport React, { memo, useEffect, useState } from \"react\";\n\nexport interface PermissionDialogProps {\n  permission: NotificationPermission;\n  requestPermission: () => void;\n}\n\nexport const PermissionDialog: React.FC<PermissionDialogProps> = memo(\n  ({ permission, requestPermission }) => {\n    const [show, setShow] = useState(permission === \"default\");\n\n    useEffect(() => {\n      if (permission !== \"default\") {\n        setShow(false);\n      }\n    }, [permission]);\n\n    if (!show) {\n      return null;\n    }\n\n    return (\n      <Layer animation=\"fadeIn\" full>\n        <Box pad=\"medium\" justify=\"center\" align=\"center\" fill>\n          <Heading textAlign=\"center\">\n            Do you want to enable notifications?\n          </Heading>\n          <Button\n            primary\n            onClick={requestPermission}\n            label=\"Enable notifications...\"\n          />\n          <Button\n            id=\"skip\"\n            onClick={() => setShow(false)}\n            label=\"Skip for now\"\n            margin=\"small\"\n          />\n        </Box>\n      </Layer>\n    );\n  }\n);\n","import { Button } from \"grommet\";\nimport React, { memo, useCallback } from \"react\";\nimport { useNotification } from \"../hooks/useNotification\";\nimport { useTimer } from \"../hooks/useTimer\";\nimport { formatTime } from \"../utils\";\nimport { Clock } from \"./Clock\";\nimport { LinkButton } from \"./LinkButton\";\nimport { PermissionDialog } from \"./PermissionDialog\";\n\nconst ToggleButton = memo(Button);\nconst SetupButton = memo(LinkButton);\n\nexport function Timer() {\n  const { showNotification, requestPermission, permission } = useNotification();\n\n  const onTick = useCallback(\n    (remaining: number) =>\n      showNotification(\"Timer\", {\n        tag: \"timer\",\n        body: formatTime(remaining, \"Time remaining: \"),\n        silent: true,\n      }),\n    [showNotification]\n  );\n\n  const onDone = useCallback(\n    () =>\n      showNotification(\"Timer\", {\n        tag: \"timer\",\n        body: \"Time out!\",\n        silent: false,\n        renotify: true,\n      }),\n    [showNotification]\n  );\n\n  const { running, toggle, duration, remaining } = useTimer(onTick, onDone);\n\n  return (\n    <>\n      <PermissionDialog\n        requestPermission={requestPermission}\n        permission={permission}\n      />\n      <Clock duration={duration} remaining={remaining} running={running} />\n      <ToggleButton\n        primary\n        onClick={toggle}\n        label={running ? \"Pause\" : \"Start\"}\n        margin=\"small\"\n      />\n      <SetupButton label={\"Setup\"} to=\"/\" />\n    </>\n  );\n}\n","import { Grommet, Main } from \"grommet\";\nimport { dark, ThemeType } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { Setup } from \"./Setup\";\nimport { Timer } from \"./Timer\";\n\nconst customTheme: ThemeType = {\n  layer: {\n    background: \"rgba(0, 0, 0, .7)\",\n  },\n};\n\nconst theme = deepMerge(dark, customTheme);\n\nexport function App() {\n  return (\n    <BrowserRouter>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <Switch>\n          <Grommet theme={theme} full>\n            <Main align=\"center\" justify=\"center\" pad=\"medium\" fill>\n              <Route exact path=\"/\" component={Setup} />\n              <Route exact path=\"/timer\" component={Timer} />\n            </Main>\n          </Grommet>\n        </Switch>\n      </QueryParamProvider>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.body\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}