{"version":3,"sources":["LinkButton.tsx","Setup.tsx","utils.ts","Timer.tsx","useNotification.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LinkButton","props","Button","as","colorProp","hasIcon","hasLabel","focus","colorValue","fillContainer","focusIndicator","pad","sizeProp","rest","Setup","useState","duration","setDuration","Heading","Box","width","min","RangeInput","max","step","value","onChange","event","Number","target","to","label","formatTime","time","prefix","hours","Math","floor","minutes","seconds","String","padStart","blink","keyframes","StyledClock","styled","Clock","paused","css","Timer","useQueryParam","NumberParam","remaining","setRemaining","isRunning","setIsRunning","Notification","permission","hasPermission","setHasPermission","requestPermission","useCallback","then","result","showNotification","title","options","navigator","serviceWorker","ready","registration","useNotification","showLayer","setShowLayer","useEffect","tick","tag","body","silent","renotify","useInterval","Layer","margin","full","animate","justify","align","fill","primary","onClick","id","Stack","anchor","Meter","type","round","values","aria-label","run","size","App","ReactRouterRoute","Route","Grommet","theme","dark","Main","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1fb80804.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, ButtonProps } from \"grommet\";\nimport { Link, LinkProps } from \"react-router-dom\";\n\nexport const LinkButton: React.FC<Pick<LinkProps, \"to\"> &\n  ButtonProps> = props => {\n  return (\n    <Button\n      as={({\n        colorProp,\n        hasIcon,\n        hasLabel,\n        focus,\n        colorValue,\n        fillContainer,\n        focusIndicator,\n        pad,\n        sizeProp,\n        ...rest\n      }) => <Link {...rest} />}\n      {...props}\n    />\n  );\n};\n","import { Box, Heading, RangeInput } from \"grommet\";\nimport React, { useState } from \"react\";\nimport { LinkButton } from \"./LinkButton\";\n\nexport function Setup() {\n  const [duration, setDuration] = useState(5);\n\n  return (\n    <>\n      <Heading>Timer setup</Heading>\n      <Box pad=\"medium\" width={{ min: \"300px\" }}>\n        <RangeInput\n          max={24}\n          min={0.5}\n          step={0.5}\n          value={duration}\n          onChange={(event: any) => setDuration(Number(event.target.value))}\n        />\n      </Box>\n      <LinkButton\n        to={`/timer?remaining=${duration * 3600}`}\n        label={`Start ${duration} hour timer`}\n      />\n    </>\n  );\n}\n","export function formatTime(time: number, prefix = \"T\") {\n  const hours = Math.floor(time / 3600);\n  const minutes = Math.floor((time / 60) % 60);\n  const seconds = Math.floor(time % 60);\n\n  return `${prefix}${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(\n    2,\n    \"0\"\n  )}:${String(seconds).padStart(2, \"0\")}`;\n}\n\nexport function calculateTime(duration: number, now: number, start: number) {\n  return duration - (now - start);\n}\n\nexport function now(date = Date.now()) {\n  return Math.floor(date / 1000);\n}\n","import useInterval from \"@use-it/interval\";\nimport { Box, Button, Clock, Layer, Meter, Stack } from \"grommet\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport { NumberParam, useQueryParam } from \"use-query-params\";\nimport { LinkButton } from \"./LinkButton\";\nimport { useNotification } from \"./useNotification\";\nimport { formatTime } from \"./utils\";\n\nconst blink = keyframes`\n  50% {\n    opacity: 0;\n  }\n`;\n\nconst StyledClock = styled(Clock)<{ paused: boolean }>`\n  animation: ${({ paused }) => paused && css`1s ${blink} ease-in-out infinite`};\n`;\n\nexport function Timer() {\n  const [remaining, setRemaining] = useQueryParam(\"remaining\", NumberParam);\n  const [duration, setDuration] = useQueryParam(\"duration\", NumberParam);\n  const [isRunning, setIsRunning] = useState(remaining !== 0);\n\n  const {\n    showNotification,\n    requestPermission,\n    hasPermission,\n  } = useNotification();\n\n  const [showLayer, setShowLayer] = useState(!hasPermission);\n\n  useEffect(() => {\n    if (hasPermission) {\n      setShowLayer(false);\n    }\n  }, [hasPermission]);\n\n  useEffect(() => {\n    if (!duration) {\n      setDuration(remaining);\n    }\n  }, [duration, remaining, setDuration]);\n\n  const tick = useCallback(() => {\n    if (remaining! > 0) {\n      setRemaining(remaining! - 1);\n      showNotification(\"Timer\", {\n        tag: \"timer\",\n        body: formatTime(remaining!, \"Time remaining: \"),\n        silent: true,\n      });\n    } else if (remaining === 0) {\n      setIsRunning(false);\n      setRemaining(duration!);\n      showNotification(\"Timer\", {\n        tag: \"timer\",\n        body: \"Time out!\",\n        silent: false,\n        renotify: true,\n      });\n    }\n  }, [duration, remaining, setRemaining, showNotification]);\n\n  useInterval(tick, isRunning ? 1000 : null);\n\n  const onButtonClick = () => {\n    setIsRunning((isRunning) => !isRunning);\n  };\n\n  return (\n    <>\n      {showLayer && (\n        <Layer margin=\"medium\" full animate={false}>\n          <Box justify=\"center\" align=\"center\" fill>\n            <Button\n              primary\n              onClick={requestPermission}\n              label=\"Enable notifications\"\n            />\n            <Button\n              id=\"skip\"\n              onClick={() => setShowLayer(false)}\n              label=\"Skip\"\n              margin=\"small\"\n            />\n          </Box>\n        </Layer>\n      )}\n      <Stack anchor=\"center\" margin=\"medium\">\n        <Meter\n          max={duration ?? 0}\n          type=\"circle\"\n          round\n          values={[\n            {\n              value: remaining ?? 0,\n            },\n          ]}\n          aria-label=\"meter\"\n        />\n        <StyledClock\n          paused={!isRunning}\n          type=\"digital\"\n          time={formatTime(remaining!)}\n          run=\"backward\"\n          size=\"xxlarge\"\n        />\n      </Stack>\n      <Button\n        onClick={onButtonClick}\n        label={isRunning ? \"Pause\" : \"Start\"}\n        primary\n        margin=\"small\"\n      />\n      <LinkButton label={\"Setup\"} to=\"/\" />\n    </>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nexport const useNotification = () => {\n  const [hasPermission, setHasPermission] = useState(\n    Notification.permission === \"granted\"\n  );\n\n  const requestPermission = useCallback(() => {\n    Notification.requestPermission().then(function (result) {\n      setHasPermission(result === \"granted\");\n    });\n  }, [setHasPermission]);\n\n  const showNotification = useCallback(\n    (title: string, options: NotificationOptions) => {\n      if (hasPermission) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.showNotification(title, options);\n        });\n      }\n    },\n    [hasPermission]\n  );\n\n  return { showNotification, requestPermission, hasPermission };\n};\n","import { Grommet, Main } from \"grommet\";\nimport { dark } from \"grommet/themes\";\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { Setup } from \"./Setup\";\nimport { Timer } from \"./Timer\";\n\nexport function App() {\n  return (\n    <BrowserRouter>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <Switch>\n          <Grommet theme={dark} full>\n            <Main align=\"center\" justify=\"center\" pad=\"medium\" fill>\n              <Route exact path=\"/\" component={Setup} />\n              <Route exact path=\"/timer\" component={Timer} />\n            </Main>\n          </Grommet>\n        </Switch>\n      </QueryParamProvider>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.body\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}